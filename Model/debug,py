#import dependencies
import tensorflow as tf
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import LSTM, Dense, InputLayer, Dropout, BatchNormalization
from keras.callbacks import EarlyStopping
from sklearn.metrics import accuracy_score
from keras.regularizers import l2

#create df of preprocessed data - game data from 2004-2024
df = pd.read_csv('nbaDatabasePreProcessed2004-2024-allPost.csv')


#maps franchises to subjectID
subjectID_dict = {
    "ATL": 1,
    "BOS": 2,
    "BKN": 3,
    "CHA": 4,
    "CHI": 5,
    "CLE": 6,
    "DAL": 7,
    "DEN": 8,
    "DET": 9,
    "GSW": 10,
    "HOU": 11,
    "IND": 12,
    "LAC": 13,
    "LAL": 14,
    "MEM": 15,
    "MIA": 16,
    "MIL": 17,
    "MIN": 18,
    "NOP": 19,
    "NYK": 20,
    "OKC": 21,
    "ORL": 22,
    "PHI": 23,
    "PHX": 24,
    "POR": 25,
    "SAC": 26,
    "SAS": 27,
    "TOR": 28,
    "UTA": 29,
    "WAS": 30,
    "NOH": 19, #New Orleans Hornets is same franchise as NOP- New Orleans Pelicans
    "NJN": 3, #New Jersey Nets relocated to Brooklyn
    "SEA": 21, #Seattle Supersonics Relocated to OKC
    "NOK": 19, #New Orleans Hornets relocated to OKC 2005-2007 - Eventually became New Orleans Pelicans
    
}


#map the subject IDs to a number to handle franchise moves
df["homeTeamSubject_id"] = df["homeTeam_id"].map(subjectID_dict)
df["awayTeamSubject_id"] = df["awayTeam_id"].map(subjectID_dict)

cols = df.columns.tolist()
cols.insert(cols.index("homeTeam_id") + 1, cols.pop(cols.index("homeTeamSubject_id")))
cols.insert(cols.index("awayTeam_id") + 1, cols.pop(cols.index("awayTeamSubject_id")))
df = df[cols]



#generate a binary winner column
df['winner_binary'] = (df['winner'] == df['awayTeam']).astype(int)


#populate dfIDtoStat - should be double the size of df
homedf = df[['date', 'homeTeamSubject_id', 'homeTeam_wins', 'homeTeam_losses', 'homeTeam_points_total']]
homedf.columns = ['date', 'team_id', 'team_wins', 'team_losses', 'team_points_total']
awaydf = df[['date', 'awayTeamSubject_id', 'awayTeam_wins', 'awayTeam_losses', 'awayTeam_points_total']]
awaydf.columns = ['date', 'team_id', 'team_wins', 'team_losses', 'team_points_total']

dfIDtoStat = pd.concat([homedf, awaydf], ignore_index=True)



windowConditions = {
    'Team_win%': False,
    'Team_wins': False,
    'Team_losses': False,
    'Team_points_total': True,
    'Team_points_q1': True,
    'Team_points_q2': True,
    'Team_points_q3': True,
    'Team_points_q4': True,
    'Team_FG': True,
    'Team_FG_made': True,
    'Team_3P': True,
    'Team_3P_made': True,
    'Team_O_Reb': True,
    'Team_D_Reb': True,
    'Team_Total_Reb': True,
    'Team_Ast': True,
    'Team_Stl': True,
    'Team_Blk': True,
    'Team_TO': True,
    'Team_PF': True,
}



#showcase of the first iteration
window_size =2
exX =[]
exY = []
for index, row in df.iterrows():
        homeTeam_id = row['homeTeamSubject_id']
        awayTeam_id = row['awayTeamSubject_id']
        date = row['date']
        #limit dfWindow to include rows that occured before date of row we are on
        dfWindow_before_date = dfIDtoStat[dfIDtoStat['date']< date]
        homeTeam_occurrences = dfWindow_before_date[dfWindow_before_date['team_id'] == homeTeam_id].shape[0]
        awayTeam_occurrences = dfWindow_before_date[dfWindow_before_date['team_id'] == awayTeam_id].shape[0]
        if homeTeam_occurrences > window_size and awayTeam_occurrences > window_size:
                homeTeam_window = (dfWindow_before_date[dfWindow_before_date['team_id'] == homeTeam_id].sort_values(by='date', ascending=False).head(window_size))
                awayTeam_window = (dfWindow_before_date[dfWindow_before_date['team_id'] == awayTeam_id].sort_values(by='date', ascending=False).head(window_size))
                print(date)
                print(homeTeam_window)
                print(awayTeam_window)
                print(type(homeTeam_window))
                homeTeam_window = homeTeam_window.drop(columns=['date', 'team_id'])
                #condtional for average or top entry - home Team
                true_cols = [col for col, val in windowConditions.items() if val and col in homeTeam_window.columns]
                false_cols = [col for col, val in windowConditions.items() if not val and col in homeTeam_window.columns]
                homeTeam_window = np.concatenate([homeTeam_window[false_cols].iloc[-1].to_numpy(), homeTeam_window[true_cols].mean(axis=0).to_numpy()])
                awayTeam_window = awayTeam_window.drop(columns=['date', 'team_id'])
                #conditional for average or top entry - away Team
                true_cols = [col for col, val in windowConditions.items() if val and col in awayTeam_window.columns]
                false_cols = [col for col, val in windowConditions.items() if not val and col in awayTeam_window.columns]
                awayTeam_window = np.concatenate([awayTeam_window[false_cols].iloc[-1].to_numpy(), awayTeam_window[true_cols].mean(axis=0).to_numpy()])
                combined_window = np.hstack((homeTeam_window, awayTeam_window))
                exX.append(combined_window)
                exY.append(row['winner_binary'])
                print(exX)
                print(exY)
                break
                        